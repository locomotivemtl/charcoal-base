{"name":"Charcoal-base","tagline":"","body":"Charcoal Base\r\n=============\r\n\r\n# Available classes and interfaces\r\n\r\nThis package extends the _charcoal-core_ framework with more utilities:\r\n- Action\r\n- Asset\r\n- Email\r\n- Image\r\n- Module\r\n- Object\r\n  - Content\r\n  - UserData\r\n- Property\r\n- Template\r\n- Widget\r\n\r\nTypically, Charcoal projects or modules do not use much of _charcoal-core_ base class, but rather are a collection of `Object` (class and json metadata), either as `UserData` or `Content` and are displayed through a `Template` and its children `Widget` (class and template files). External resources, `Asset` (scripts, styles, images, etc.) are typically included in  project. User input, and some scripts, are provided through `Action`. All those classes are extended from the base classes in this package, _charcoal-base_.\r\n\r\n## Action\r\nA response to an event or request. Typically, an operation to be performed on user input (submit form, etc.) or from system (cron, etc.) The `\\Charcoal\\Action` class ensures standards across request handling, response output, etc.\r\n\r\n## Asset\r\nAssets are external resources required by a template or a widget which can be loaded (or searched) from various sources, typically multiple path from the filesystem. Asset types are:\r\n- File\r\n- Font\r\n- Image\r\n- Script\r\n- Style\r\n\r\n## Email\r\nThe `\\Charcoal\\Email` namespace contains everything required to send, log, queue and track emails as well as generate them from templates.\r\n\r\n## Image\r\nImage manipulation. This is still @todo (port from _charcoal-legacy_). The plan is to switch to [http://image.intervention.io/].\r\n\r\n## Module\r\n...\r\n\r\n## Object\r\n...\r\n\r\n## Property\r\nThe core Property classes and interfaces are found in `charcoal-core`, however, basic concrete properties are provided within this package:\r\n- Boolean\r\n- Choice\r\n  - Object\r\n- Color\r\n- Date\r\n  - Date\r\n  - Datetime\r\n  - Day\r\n  - Month\r\n  - Time\r\n  - Year\r\n- File\r\n  - Image\r\n  - Video\r\n- Number\r\n  - Float\r\n  - Integer\r\n- Id\r\n- Image\r\n- String\r\n  - Html\r\n  - Password\r\n  - Text\r\n- Structure\r\n\r\n## Template\r\nTemplates are renderable top-level models, through _charcoal-core_'s `ViewableInterface`. They are typicaly consisted of a Template class and an actual template file (mustache or php). \r\n\r\n> Although it is perfectly fine to use `Charcoal\\Template` directly, most projects will use the specialized `Charcoal\\Cms\\Template` from the _charcoal-cms` module.\r\n\r\n### Example: binding a template to a URL (route)\r\n``` php\r\nCharcoal::app()->get('/example', function($args=null) {\r\n    $view = new TemplateView();\r\n    $content = $view->from_ident('charcoal/project/template/example')->render();\r\n    echo $content;\r\n  })->name('/example');\r\n```\r\n\r\n## Widget\r\n...\r\n\r\n# Authors\r\n- Mathieu Ducharme, mat@locomotive.ca\r\n\r\n# License\r\n- TBA\r\n\r\n# Release History\r\n_Unreleased_\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}